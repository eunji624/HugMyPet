generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserMembers {
  userId           Int                @id @default(autoincrement()) @map("userId")
  email            String             @unique @map("email")
  userName         String             @map("userName")
  age              Int                @map("age")
  password         String             @map("password")
  address          String             @map("address")
  imagePath        String             @map("imagePath")
  createdAt        DateTime           @default(now()) @map("createdAt")
  updatedAt        DateTime           @updatedAt @map("updatedAt")
  PetSitterReviews PetSitterReviews[]
  Pets             Pets[]
  Reserves         Reserves[]

  @@map("UserMembers")
}

model UserPetSitters {
  petSitterId        Int                  @id @default(autoincrement()) @map("petSitterId")
  email              String               @unique @map("email")
  petSitterName      String               @map("petSitterName")
  age                Int                  @map("age")
  password           String               @map("password")
  selfIntro          String               @map("selfIntro")
  availablePet       AvailablePet         @default(Dog) @map("availablePet")
  availableAddress   String               @map("availableAddress")
  certificate        String               @map("certificate")
  score              Int?                  @map("score")
  imagePath          String               @map("imagePath")
  createdAt          DateTime             @default(now()) @map("createdAt")
  updatedAt          DateTime             @updatedAt @map("updatedAt")
  PetSitterReviews   PetSitterReviews[]
  PetSitterSchedules PetSitterSchedules[]
  Reserves           Reserves[]

  @@map("UserPetSitters")
}

model Pets {
  petId      Int         @id @default(autoincrement()) @map("petId")
  petName    String      @map("petName")
  petAge     Int         @map("petAge")
  petSpecies String      @map("petSpecies")
  imagePath  String      @map("imagePath")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     Int
  UserMember UserMembers @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "Pets_userId_fkey")
}

model PetSitterReviews {
  reviewId      Int            @id @default(autoincrement())
  petSitterId   Int            @map("petSitterId")
  userId        Int            @map("userId")
  title         String         @map("title")
  content       String         @map("content")
  score         Int            @map("score")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  UserPetSitter UserPetSitters @relation(fields: [petSitterId], references: [petSitterId], onDelete: Cascade)
  UserMember    UserMembers    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([petSitterId], map: "PetSitterReviews_petSitterId_fkey")
  @@index([userId], map: "PetSitterReviews_userId_fkey")
}

model Reserves {
  reserveId          Int                  @id @default(autoincrement())
  timeId             Int                  @map("timeId")
  petSitterId        Int                  @map("petSitterId")
  userId             Int                  @map("userId")
  status             Status               @map("status")
  reserveStart       DateTime             @map("reserveStart")
  reserveEnd         DateTime             @map("reserveEnd")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PetSitterSchedules PetSitterSchedules[]
  UserPetSitters     UserPetSitters       @relation(fields: [petSitterId], references: [petSitterId], onDelete: Cascade)
  UserMembers        UserMembers          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([petSitterId], map: "Reserves_petSitterId_fkey")
  @@index([userId], map: "Reserves_userId_fkey")
}

model PetSitterSchedules {
  scheduleId    Int            @id @default(autoincrement()) @map("userId")
  reserveId     Int            @default(-1) @map("reserveId")
  petSitterId   Int            @map("petSitterId")
  status        Status         @default(inProgress) @map("status")
  availableDate DateTime       @map("availableDate")
  createdAt     DateTime       @default(now()) @map("createdAt")
  updatedAt     DateTime       @updatedAt @map("updatedAt")
  UserPetSitter UserPetSitters @relation(fields: [petSitterId], references: [petSitterId], onDelete: Cascade)
  Reserve       Reserves       @relation(fields: [reserveId], references: [reserveId], onDelete: Cascade)

  @@index([petSitterId], map: "PetSitterSchedules_petSitterId_fkey")
  @@index([reserveId], map: "PetSitterSchedules_reserveId_fkey")
  @@map("PetSitterSchedules")
}

enum AvailablePet {
  Dog
  Cat
}

enum Status {
  inProgress
  Completed
}
