// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserMembers {
  userId      Int       @id   @default(autoincrement())   @map("userId")
  userName    String                                      @map("userName")
  age         Int                                         @map("age")
  address     String                                      @map("address")
  imagePath   String                                      @map("imagePath")
  createdAt   DateTime        @default(now())             @map("createdAt")
  updatedAt   DateTime        @updatedAt                  @map("updatedAt")

  Reserves              Reserves[]
  PetSitterReviews      PetSitterReviews[]
  Pets                  Pets[]

  @@map("UserMembers")
}


model UserPetSitters {
  petSitterId          Int           @id       @default(autoincrement())   @map("petSitterId")
  petSitterName        String                                              @map("petSitterName")
  age                  Int                                                 @map("age")
  selfIntro            String                                              @map("selfIntro")
  availablePet         AvailablePet            @default(Dog)               @map("availablePet")
  availableAddress     String                                              @map("availableAddress")
  certificate          String                                              @map("certificate")
  score                Int                                                 @map("score")
  imagePath            String                                              @map("imagePath")
  createdAt            DateTime                 @default(now())            @map("createdAt")
  updatedAt            DateTime                 @updatedAt                 @map("updatedAt")

  Reserves             Reserves[]
  PetSitterReviews     PetSitterReviews[]
  PetSitterSchedules   PetSitterSchedules[]

  @@map("UserPetSitters")
}

enum AvailablePet {
  Dog
  Cat
}


model Pets {
  petId          Int      @id    @default(autoincrement())    @map("petId")
  petName        String                                       @map("petName")
  petAge         Int                                          @map("petAge")
  petSpecies     String                                       @map("petSpecies")
  imagePath      String                                       @map("imagePath")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  userId         Int                                       

  UserMember     UserMembers    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model PetSitterReviews {
  reviewId       Int       @id     @default(autoincrement())
  petSitterId    Int                                           @map("petSitterId")
  userId         Int                                           @map("userId")
  title          String                                        @map("title")
  content        String                                        @map("content")
  score          Int                                           @map("score")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  UserMember           UserMembers        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  UserPetSitter        UserPetSitters     @relation(fields: [petSitterId], references: [petSitterId], onDelete: Cascade)
}

model Reserves {
  reserveId       Int      @id    @default(autoincrement())  
  timeId          Int                                           @map("timeId")   
  petSitterId     Int                                           @map("petSitterId")  
  userId          Int                                           @map("userId")   
  status          Status                                        @map("status")  
  reserveStart    DateTime                                      @map("reserveStart")  
  reserveEnd      DateTime                                      @map("reserveEnd")  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  UserMembers            UserMembers            @relation(fields : [userId], references : [userId], onDelete : Cascade)
  PetSitterSchedules     PetSitterSchedules     @relation(fields : [timeId], references : [scheduleId], onDelete : Cascade)
  UserPetSitters         UserPetSitters         @relation(fields : [petSitterId], references : [petSitterId], onDelete : Cascade)

}

model PetSitterSchedules {
  scheduleId         Int      @id      @default(autoincrement())     @map("scheduleId")
  reserveId          Int?                                            @map("reserveId")
  petSitterId        Int                                             @map("petSitterId")
  status             Status            @default(inProgress)          @map("status")
  availableDate      DateTime                                        @map("availableDate")
  createdAt          DateTime          @default(now())               @map("createdAt")
  updatedAt          DateTime          @default(now())                    @map("updatedAt")

  UserPetSitter      UserPetSitters    @relation(fields : [petSitterId], references : [petSitterId], onDelete : Cascade)
  Reserve            Reserves[]      

  @@map("PetSitterSchedules")
  
}

enum Status {
  inProgress
  Completed
}